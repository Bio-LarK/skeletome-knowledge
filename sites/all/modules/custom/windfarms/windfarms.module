<?php
/**
 * @file
 * Custom functionality for a wind farm database.
 */

/**
 * Implements hook_help().
 */
function windfarms_help($path, $arg) {
	switch($path) {
		case 'admin/help#windfarms':{
			$ret_val = '<h3>' .  t('About') . '</h3>';
			$ret_val .= '<p>' . t('The Wind Farms module makes it easy to manage a database of wind farms') . '</p>';
			return $ret_val;
			break;
		}
		default:
			break;
	}	
}

/**
 * Implements hook_permission().
 */
function windfarms_permission() {
	return array(
		'administer wind farms' => array(
			'title'			=> t('Administer Wind Farms'),
			'description'	=> t('Perform administrative tasks on wind farms functionality')
		)
	);
}

/**
 * Implements hook_menu().
 */
function windfarms_menu() {
	$items = array();
	
	// Admin configuration group.
	$items['admin/config/windfarms'] = array(
		'title'				=> 'Wind Farms',
		'description'		=> 'Administer Wind Farms',
		'access arguments'	=> array('administer wind farms')
	);
	
	// Admin configuration - Settings.
	$items['admin/config/windfarms/manage'] = array(
		'title'				=> 'Wind Farm settings',
		'description'		=> 'Manage Wind Farm setting and configurations.',
		'access arguments'	=> array('administer wind farms'),
		'page callback'		=> 'drupal_get_form',
		'page arguments'	=> array('windfarms_admin_settings_form')
	);
	
	return $items;
}

/**
 * Implements hook_form().
 */
function windfarms_admin_settings_form($node, &$form_state) {
	$form = array();
	
	$form['overview'] = array(
		'#markup'	=> t('This interface allows administrators to manage general Wind Farm settings'),
		'#prefix'	=> '<p>',
		'#suffix'	=> '</p>'
	);
	
	$form['windfarms_gmap'] = array(
		'#title'			=> t('Enable Google Maps'),
		'#description'		=> t('When enabled, Google maps will be rendered if latitude and longitude are known.'),
		'#type'				=> 'checkbox',
		'#default_value'	=> variable_get('windfarms_gmap')
	);
	
	$form['default_center'] = array(
		'#title'			=> t('Map Center'),
		'#description'		=> t('Location of the center of the map of wind farms.'),
		'#type'				=> 'fieldset',
		'#collapsible'		=> TRUE,
		'#collapsed'		=> FALSE,
	);
	
	$form['default_center']['windfarms_default_center_lat'] = array(
		'#title'			=> t('Latitude'),
		'#description'		=> t('Signed degrees format (DDD,dddd)'),
		'#type'				=> 'textfield',
		'#default_value'	=> variable_get('windfarms_default_center_lat'),
		'#required'			=> TRUE
	);
	
	$form['default_center']['windfarms_default_center_long'] = array(
		'#title'			=> t('Longitude'),
		'#description'		=> t('Signed degrees format (DDD,dddd)'),
		'#type'				=> 'textfield',
		'#default_value'	=> variable_get('windfarms_default_center_long'),
		'#required'			=> TRUE
	);
	
	$options = range(0, 20, 1);
	$options[0] = t('0 - Furthest');
	$options[20] = t('20 - Closest');
	
	$form['windfarms_default_gmap_zoom'] = array(
		'#title' 			=> t('Google Map zoom'),
		'#description'		=> t('Default level of zoom, between 0 and 20.'),
		'#type'				=> 'select',
		'#options'			=> $options,
		'#default_value'	=> variable_get('windfarms_default_gmap_zoom'),
		'#required'			=> TRUE
	);
	
	
	return system_settings_form($form);
}


/**
 * Validates Wind Farm admin settings.
 */
function windfarms_admin_settings_form_validate($form, &$form_state) {
	
	$signed_degree_regex = '/^[+-]?\d+(\.\d+)?$/';
	
	$lat = $form_state['values']['windfarms_default_center_lat'];
	$long = $form_state['values']['windfarms_default_center_long'];
	
	// validate latitude and longitude format.
	if(!_windfarms_validate_signed_degrees($lat)) {
		form_set_error('windfarms_default_center_lat', t('Invalid latitude; must be a signed degree (DDD.dddd).'));
	}
	if(!_windfarms_validate_signed_degrees($long)) {
		form_set_error('windfarms_default_center_lat', t('Invalid longitude; must be a signed degree (DDD.dddd).'));
	}
	
	if(!_windfarms_validate_geo_coord_range($lat)) {
		form_set_error('windfarms_default_center_lat', t('Latitude must be between -180 and 180'));
	}
	
	if(!_windfarms_validate_geo_coord_range($long)) {
		form_set_error('windfarms_default_center_lat', t('Longitude must be between -180 and 180'));
	}
}

/**
 * Implements hook_form_alter().
 */
function windfarms_form_alter(&$form, &$form_state, $form_id) {
	
	switch($form_id) {
		case 'windfarm_node_form':
			$form['#validate'][] = 'windfarms_windfarm_node_form_validate';
			break;
		default:
			break;
	}
}

/**
 * Validates Wind Farm content type.
 */
function windfarms_windfarm_node_form_validate($form, &$form_state) {
	$value = $form_state['values']['windfarm_unit_count'][LANGUAGE_NONE][0]['value'];
	if($value !== '' && (!is_numeric($value) || intval($value) != $value || $value <= 0)) {
		form_set_error('windfarm_unit_count', t('The number of units on a wind farm must be a positive whole number.'));
	}
	
	// Validate latitude
	$lat = $form_state['values']['windfarm_latitude'][LANGUAGE_NONE][0]['value'];
	if(!_windfarms_validate_geo_coord_range($lat) || !_windfarms_validate_signed_degrees($lat)) {
		form_set_error('windfarm_latitude', t('Latitude must be a valid coordinates in signed degrees.'));
	}
	
	// Validate longitude
	$long = $form_state['values']['windfarm_longitude'][LANGUAGE_NONE][0]['value'];
	if(!_windfarms_validate_geo_coord_range($long) || !_windfarms_validate_signed_degrees($long)) {
		form_set_error('windfarm_longitude', t('Longitude must be a valid coordinates in signed degrees.'));
	}
}

/**
 * Determine if a value is in signed degrees format.
 * @param  string $value
 *		The value to be tested.
 * @return boolean
 *		TRUE if correctly formatted.
 */
function _windfarms_validate_signed_degrees($value) {
	$signed_degree_regex = '/^[+-]?\d+(\.\d+)?$/';
	return preg_match($signed_degree_regex, $value) ? TRUE : FALSE;
}
/**
 * Determine if a geo coord is in a valid range
 * @param  string $value
 *		The value to be tested.
 * @return boolean
 *		TRUE if between -180 and 180.
 */
function _windfarms_validate_geo_coord_range($value) {
	return (!((-180 <= $value) && ($value <= 180)));
}


/**
 * Implements hook_feeds_importer_default().
 */
function windfarms_feed_importer_default() {
	$export = array();
	
	$feeds_importer = new stdClass();
	$feeds_importer->disabled = FALSE;
	$feeds_importer->api_version = 1;
	$feeds_importer->id = 'openei_wind_farms';
	$feeds_importer->config = array(
	  'name' => 'OpenEI Wind Farms',
	  'description' => 'CSV Import of OpenEI Wind Farms Database',
	  'fetcher' => array(
		'plugin_key' => 'FeedsFileFetcher',
		'config' => array(
		  'allowed_extensions' => 'txt csv tsv xml opml',
		  'direct' => FALSE,
		),
	  ),
	  'parser' => array(
		'plugin_key' => 'FeedsCSVParser',
		'config' => array(
		  'delimiter' => ',',
		  'no_headers' => 0,
		),
	  ),
	  'processor' => array(
		'plugin_key' => 'FeedsNodeProcessor',
		'config' => array(
		  'content_type' => 'windfarm',
		  'expire' => '-1',
		  'author' => 0,
		  'authorize' => 1,
		  'mappings' => array(
			0 => array(
			  'source' => 'Facility Name',
			  'target' => 'title',
			  'unique' => FALSE,
			),
			1 => array(
			  'source' => 'Facility',
			  'target' => 'body',
			  'unique' => FALSE,
			),
			2 => array(
			  'source' => 'NumberOfUnits',
			  'target' => 'windfarm_unit_count',
			  'unique' => FALSE,
			),
			3 => array(
			  'source' => 'Latitude',
			  'target' => 'windfarm_latitude',
			  'unique' => FALSE,
			),
			4 => array(
			  'source' => 'Longitude',
			  'target' => 'windfarm_longitude',
			  'unique' => FALSE,
			),
			5 => array(
			  'source' => 'WindTurbineManufacturer',
			  'target' => 'windfarm_turbine_manufacturer',
			  'unique' => FALSE,
			),
		  ),
		  'update_existing' => '0',
		  'input_format' => 'plain_text',
		  'skip_hash_check' => 0,
		),
	  ),
	  'content_type' => '',
	  'update' => 0,
	  'import_period' => '-1',
	  'expire_period' => 3600,
	  'import_on_create' => 1,
	  'process_in_background' => 0,
	);

	$export['openei_wind_farms'] = $feeds_importer;
	return $export;
}
/**
 * Implements hook_ctools_plugin_api().
 */
function windfarms_ctools_plugin_api($module = '', $api = '') {
	if($module == 'feeds' && $api == 'feeds_importer_default') {
		return array('version' => 1);
	}
}


/**
 * Implements hook_node_view(). Acts on the node before rendering
 */
function windfarms_node_view($node, $view_mode, $langcode) {
	// calls the theme function to create content
	// theme function generates theme output
	if($node->type == 'windfarm' && $view_mode == 'full') {
		$node->content['windfarm_gmap'] = array(
			'#markup' => theme('windfarm_gmap', array(
				'node' => $node
			)),
			'#weight' => 100
		);
	}
}

/**
 * Implements hook_theme(). Register custom theme with drupal.
 */
function windfarms_theme($existing, $type, $theme, $path) {
	// returns an array keyed by theme function
	// and some options
	// we are specifying that variables will be available to the theme
	// so we have 1 variable, Node, which defaults to null
	return array(
		'windfarm_gmap' => array(
			'variables' => array('node' => NULL)
		)
	);
}


/**
 * Wind Farm Google Map Theme function. Must start with 'theme' and 
 * we get back the array of variables we created earlier.
 */
function theme_windfarm_gmap($variables) {
	// Check to see if google map is enabled.
	if(!variable_get('windfarms_gmap')) {
		return;
	}
	
	dpm($variables['node']);
	$lat = -27.605670826465445; 
	//$variables['node']->windfarm_latitude[LANGUAGE_NONE][0]['value'];
	$long = 152.2265625; //$variables['node']->windfarm_longitude[LANGUAGE_NONE][0]['value'];
	
	if(($lat == '') || ($long == '')) {
		return;
	}
	
	module_load_include('inc', 'gmap3_tools');
	
	$facility_name = check_plain($variables['node']->title);
	$description = check_plain($variables['node']->body[LANGUAGE_NONE][0]['value']);
	
	gmap3_tools_add_map(array(
		'mapId' => 'gmap-canvas-' . $variables['node']->nid,
		'mapOptions' => array(
			'zoom' 			=> (int) variable_get('windfarms_default_gmap_zoom'),
			'mapTypeId'		=> GMAP3_TOOLS_MAP_TYPE_ID_SATELLITE
		),
		'markers' => array(
			gmap3_tools_create_marker($lat, $long, $facility_name, $description)
		
		),
		'gmap3ToolsOptions' => array(
			'deafultMarkersPosition' => GMAP3_TOOLS_DEFAULT_MARKERS_POSITION_CENTER,
		)	
	));
	
	$output = '<div id="gmap-canvas-' . $variables['node']->nid . '" style="width: 500px; height: 400px"></div>';
	
	return $output;
}


/**
 * Implements hook_block_info(). Telling Drupal im making a block.
 */
function windfarms_block_info() {
	$blocks = array();
	$blocks['gmap'] = array(
		'info' => t('Wind Farm Map'),
	);
	
	return $blocks;
}


/** 
 * Implements hook_block_view().
 */
function windfarms_block_view($delta = '') {
	$block = array();
	
	switch($delta) {
		case 'gmap':
			$block['subject'] = t('Wind Farm Map');
			$block['content'] = windfarm_block_contents($delta);
			break;
	}
	
	return $block;
}

/**
 * Wind Farm Block contents. (custom function, not a hook)
 * @param string $delta
 * 		The block ID
 * @return string
 * 		HTML Output.
 */
function windfarm_block_contents($delta) {
	$output = '';
	switch($delta) {
		case 'gmap':
// 			module_load_include('inc', 'location', 'earth');
			
			// Rest of stuff in drupal 7
			
			/*
			// Build query
			$query = new EntityFieldQuery();
			// only show nodes
			$query->entityCondition('entity_type', 'node');
			// only show windfarms
			$query->entityCondition('bundle', 'windfarm');
			// only show latitude between range
			$query->fieldCondition('windfarm_latitude', 'value', $range_lat, 'BETWEEN');
			$query->fieldCondition('windfarm_longitude', 'value', $range_lon, 'BETWEEN');
			
			$result = $query->execute();
			
			// no results?
			if(!isset($result['node'])) {
				return '';
			}
			
			// convert array of node ids, to node objects
			$nodes = node_load_multiple(array_keys($results['node']));
			
			module_load_inclue('inc', 'gmap3_tools');
			
			$markers = array();
			
			foreach($nodes as $node) {
				$lat = $node->windfarm_latitude[LANGUAGE_NONE][0]['value'];
				$lon = $node->windfarm_longitude[LANGUAGE_NONE][0]['value'];
							// create a link (using l function)
				// to a node
				$description = l(t('More Info'), 'node/' . $node->nid);
			
				$markers[] = gmap3_tools_create_marker(blah);
			}
			
			
			// add the map here but bleh.*/
			
			$output = "<div id='blah'>yippeee</div>";
			return $output;
			break;
	}
}


