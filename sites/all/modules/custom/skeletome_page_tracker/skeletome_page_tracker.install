<?php
function skeletome_page_tracker_install()
{
    $t = get_t();

    $page_tracker = array(
        'type' => 'page_tracker',
        'name' => $t('Page Tracker'),
        'base' => 'node_content',
        'description' => $t('Tracks page loads for logged in users.'),
//        'body_label' => $t('Biography')
    );

    $content_type = node_type_set_defaults($page_tracker);
//    node_add_body_field($content_type);
    node_type_save($content_type);

//    $body_instance = field_info_instance('node', 'body', 'page_tracker');
//    $body_instance['type'] = 'text_long';
//    $body_instance['label'] = 'Biography';

//    field_update_instance($body_instance);

    foreach (_page_tracker_installed_fields() as $field) {
        try {
            field_create_field($field);
        } catch (Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    foreach (_page_tracker_installed_instances() as $instance) {
        $instance['entity_type'] = 'node';
        $instance['bundle'] = $page_tracker['type'];
        field_create_instance($instance);
    }
}

function _page_tracker_installed_fields()
{
    $t = get_t();
    return array(
        'field_page_tracker_search' => array(
            'field_name' => 'field_page_tracker_search',
            'label' => t('Search Queried'),
            'cardinality' => 1,
            'type' => 'text',
            'settings' => array(
                'max_length' => 500,
            )
        ),
        'field_page_tracker_node' => array(
            'field_name' => 'field_page_tracker_node',
            'label' => $t('Node Loaded'),
            'cardinality' => 1,
            'type' => 'entityreference',
            'settings' => array(
                'referenceable_types' => array(
                    'bone_dysplasia' => 'bone_dysplasia',
                    'gene' => 'gene'
                )
            )
        ),

        'field_page_tracker_term' => array(
            'field_name' => 'field_page_tracker_term',
            'label' => $t('Term Loaded'),
            'cardinality' => 1,
            'type' => 'taxonomy_term_reference',
            'settings' => array(
                'allowed_values' => array(
                    array(
                        'vocabulary' => 'sk_group_source_release',
                        'parent' => '0',
                    ),
                    array(
                        'vocabulary' => 'skeletome_vocabulary',
                        'parent' => '0',
                    ),
                )
            )
        ),
        'field_page_tracker_user_id' => array(
            'field_name' => 'field_page_tracker_user_id',
            'label' => $t('User Id'),
            'cardinality' => 1,
            'type' => 'number_integer',
        ),
    );

}

function _page_tracker_installed_instances()
{
    $t = get_t();
    return array(
        'field_page_tracker_search' => array(
            'field_name' => 'field_page_tracker_search',
            'label' => $t('Search Queried'),
            'cardinality' => 1,
            'widget' => array(
                'type' => 'text_textfield',
            ),
        ),

        'field_page_tracker_node' => array(
            'field_name' => 'field_page_tracker_node',
            'label' => $t('Node Loaded'),
            'cardinality' => 1,
            'widget' => array(
                'type' => 'entityreference_autocomplete',
            ),
        ),
        'field_page_tracker_term' => array(
            'field_name' => 'field_page_tracker_term',
            'label' => $t('Term Loaded'),
            'cardinality' => 1,
            'widget' => array(
                'type' => 'active_tags_taxonomy_autocomplete',
            )
        ),
        'field_page_tracker_user_id' => array(
            'field_name' => 'field_page_tracker_user_id',
            'label' => $t('User Id'),
            'cardinality' => 1,
            'widget' => array(
                'type' => 'number',
            ),
        ),
    );
}

function skeletome_page_tracker_uninstall()
{
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query($sql, array(':type' => 'page_tracker'));
    $nids = array();
    foreach ($result as $row) {
        $nids[] = $row->nid;
    }

    node_delete_multiple($nids);

    foreach (array_keys(_page_tracker_installed_fields()) as $field) {
        field_delete_field($field);
    }

    $instances = field_info_instances('node', 'page_tracker');
    foreach ($instances as $instance_name => $instance) {
        field_delete_instance($instance);
    }

    node_type_delete('page_tracker');

    field_purge_batch(1000);
}
