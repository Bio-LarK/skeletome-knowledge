<?php
// $Id: statement.module $

/**
 * Implements hook_menu()
 */
function statement_menu() {
//
    $items['ajax/statement/%/approve'] = array(
        'page callback' 	=> 'statement_approve',
        'page arguments'    => array(2),
        'access arguments'  => array('access content'),
        'type'  => MENU_CALLBACK,
    );

    /* Adding Comments to Statements */
    $items['ajax/statement/%node/comment/add'] = array(
        'title'             => t('Add Comment to Statement.'),
        'type'              => MENU_CALLBACK,
        'page arguments'    => array(2),
        'page callback'     => 'ajax_add_comment_to_statement',
        'access callback'   => 'is_authenticated',
    );
    $items['ajax/statement/%/comment/%/remove'] = array(
        'title'             => t('Remove Comment from Statement.'),
        'type'              => MENU_CALLBACK,
        'page arguments'    => array(4),
        'page callback'     => 'ajax_remove_comment_from_statement',
        'access callback'   => 'is_authenticated',
    );

    $items['ajax/statement/%node/comments'] = array(
        'title'             => t('Get Comments for Statement.'),
        'type'              => MENU_CALLBACK,
        'page arguments'    => array(2),
        'page callback'     => 'ajax_get_comments_for_statement',
        'access arguments'  => array('access content')
    );

    return $items;
}

function statement_approve($statement_id) {
    $data = file_get_contents("php://input");
    $objData = json_decode($data, true);

    $statement = node_load($statement_id);
    $statement->field_statement_approved_time[LANGUAGE_NONE][0]["value"] = time();

    foreach($objData['userIds'] as $user_id) {
        $user_id = array(
            'value' => $user_id
        );
        $statement->field_statement_approved_users[LANGUAGE_NONE][] = $user_id;
    }

    node_save($statement);

    $statement = node_load($statement->nid);
    echo json_encode($statement);
}





function ajax_add_comment_to_statement($statement) {
    $data = file_get_contents("php://input");
    $objData = json_decode($data, true);

    // Get out the comment text
    $comment_text = $objData['comment_text'];

    $comment = new stdClass();

    global $user;

    $comment->nid = $statement->nid; // nid of a node you want to attach a comment to
    $comment->cid = 0; // leave it as is
    $comment->pid = 0; // parent comment id, 0 if none
    $comment->uid = $user->uid; // user's id, who left the comment
    $comment->mail = ''; // user's email
    $comment->name = $user->name; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
    //$comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
    //$comment->hostname = '127.0.01' // OPTIONAL. You can log poster's ip here

    $comment->created = time(); // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
    $comment->is_anonymous = 0; // leave it as is
    //$comment->homepage = ''; // you can add homepage URL here
    $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
    $comment->language = LANGUAGE_NONE; // The same as for a node
    $comment->subject = '';
    $comment->comment_body[$comment->language][0]['value'] = $comment_text; // Everything here is pretty much like with a node
    $comment->comment_body[$comment->language][0]['format'] = 'filtered_html';
    //$comment->field_custom_field_name[LANGUAGE_NONE][0]['value'] = ‘Some value’; // OPTIONAL. If your comment has a custom field attached it can added as simple as this // preparing a comment for a save

    comment_submit($comment); // saving a comment
    comment_save($comment);

    echo drupal_json_encode($comment);
}

function ajax_get_comments_for_statement($statement_node) {
    $comments = array_values(comment_load_multiple(comment_get_thread($statement_node, '', 1000)));
    $comments = array_reverse($comments);
    echo drupal_json_encode($comments);
}

function ajax_remove_comment_from_statement($comment_id) {
    comment_delete($comment_id);
}



/**
 * Implements HOOK_form_FORM_ID_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function statement_form_statement_node_form_alter(&$form, &$form_state, $form_id) {

if (isset($form['type']) && isset($form['#node'])) {
    if ('statement_node_form' == $form_id) {
//       $form['field_statement_bonedysplasia']['#access'] = FALSE;
    }
  }
}

function statement_node_presave($node) {
//  if (property_exists($node, 'field_statement_bonedysplasia')) {
//    $val = $node->field_statement_bonedysplasia;
//
//    if (empty($val['und'])) {
//      $node->field_statement_bonedysplasia['und'] = array (
//	'0' => array (
//	  'nid' => arg(3),
//	),
//      );
//    }
//  }
}

function statement_node_insert($node) {
//   if ($node->type == 'statement') {
//       $bd_node = node_load(arg(3));
// 
//       if (empty($bd_node->field_bd_statement['und'])) {
// 	$facts = array(
// 	  '0' => array (
// 	    'nid' => $node->nid,
// 	  ),
// 	);
// 	$bd_node->field_bd_statement = array (
// 	  'und' => $facts,
// 	);
// 	node_save($bd_node);
//       } else {
// 	$facts = $bd_node->field_bd_statement['und'];
// 	$new_fact = array (
// 	  'nid' => $node->nid,
// 	);
// 	array_push($facts, $new_fact);
// 	$bd_node->field_bd_statement['und'] = $facts;
// 	node_save($bd_node);
//       }
//   }
}

function statement_node_delete($node) {
//  if ($node->type == 'statement') {
//    $bd_nid = $node->field_statement_bonedysplasia['und'][0]['target_id'];
//    $bd_node = node_load($bd_nid);
//    $facts = $bd_node->field_bd_statement['und'];
//
//    $act_idx = -1;
//    for ($i = 0; $i < count($facts); $i++) {
//      if ($facts[$i]['nid'] == $node->nid) {
//	$act_idx = $i;
//        break;
//      }
//    }
//
//    if ($act_idx != -1) {
//      array_splice($facts, $act_idx, 1);
//      $bd_node->field_bd_statement['und'] = $facts;
//      node_save($bd_node);
//    }
//  }
}

function statement_node_view($node, $view_mode) {
//  if ($node->type == 'statement' && $view_mode == 'teaser') {
//    drupal_add_css(drupal_get_path('module', 'statement') . '/statement.css');
//    $permissions = _bdf_get_node_access_for_user($node->uid, $node->type);
//
//    if ($permissions['edit'] == 1) {
//      $node->content['edit_bdf_link'] = array(
//        '#theme' => 'links',
//        '#links' => array (
//	  'edit-bdf-link' => array (
//	    'title' => t('Edit'),
//	    'href' => 'node/' . $node->nid . '/edit',
//	    'html' => true,
//	  ),
//        ),
//        '#attributes' => array (
//	  'class' => 'bdf-title-link',
//        ),
//      );
//    }
//    if ($permissions['delete'] == 1) {
//      $node->content['delete_bdf_link'] = array(
//        '#theme' => 'links',
//        '#links' => array (
//	  'delete-bdf-link' => array (
//	    'title' => t('Delete'),
//	    'href' => 'node/' . $node->nid . '/delete',
//	    'html' => true,
//	  ),
//        ),
//        '#attributes' => array (
//	  'class' => 'bdf-title-link',
//        ),
//      );
//    }
//  }
  
  return $node;
}

function _bdf_get_node_access_for_user($node_owner, $node_type) {
  global $user;

  $permissions = array();
  $perms = user_role_permissions($user->roles);

  return TRUE;
}

function statement_field_extra_fields() {
  $extra['node']['statement'] = array(
    'display' => array(
      'edit_bdf_link' => array(
        'label' => t('"Edit" link'),
        'weight' => 1,
      ),
      'delete_bdf_link' => array(
        'label' => t('"Delete" link'),
        'weight' => 1,
      ),
    ),
  );

  return $extra;
}

function statement_create($text, $node_target_id) {

    global $user;
    $statement = new stdClass();
    $statement->title = "Statement";
    $statement->type = "statement";
    node_object_prepare($statement); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $statement->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $statement->uid = $user->uid;
    $statement->status = 1; //(1 or 0): published or not
    $statement->promote = 0; //(1 or 0): promoted to front page
    $statement->comment = 1; //2 = comments on, 1 = comments off
    $statement->field_statement_node[LANGUAGE_NONE][] = array(
        'target_id' => $node_target_id
    );

    $statement->body[LANGUAGE_NONE][0]['value'] = $text; // the statement
    $statement->body[LANGUAGE_NONE][0]['format'] = 'filtered_html';

    $statement = node_submit($statement); // Prepare node for saving
    node_save($statement);

    $statement = node_load($statement->nid);

    // Setup some stuff that it doesnt want to do on node save for some unknown reason!
    $statement->body[LANGUAGE_NONE][0]['safe_value'] = check_markup($statement->body[LANGUAGE_NONE][0]['value'], 'filtered_html');
    $statement->comment_count = 0;
    $statement->name = $user->name;

    // Now lets attach the node to the bone dysplasia

    return $statement;
}
