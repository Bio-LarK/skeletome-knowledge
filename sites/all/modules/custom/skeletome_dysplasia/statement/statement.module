<?php
// $Id: statement.module $

/**
 * Implements hook_menu()
 */
function statement_menu() {
//
    $items['ajax/statement/approve/%'] = array(
        'page callback' 	=> 'statement_approve',
        'page arguments'    => array(3),
        'access arguments'  => array('access content'),
        'type'  => MENU_CALLBACK,
    );

    return $items;
}

function statement_approve($statement_id) {
    $data = file_get_contents("php://input");
    $objData = json_decode($data, true);

    $statement = node_load($statement_id);
    $statement->field_statement_approved_time[LANGUAGE_NONE][0]["value"] = time();

    foreach($objData['userIds'] as $user_id) {
        $user_id = array(
            'value' => $user_id
        );
        $statement->field_statement_approved_users[LANGUAGE_NONE][] = $user_id;
    }

    node_save($statement);

    $statement = node_load($statement->nid);
    echo json_encode($statement);
}


/**
 * Implements HOOK_form_FORM_ID_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function statement_form_statement_node_form_alter(&$form, &$form_state, $form_id) {

if (isset($form['type']) && isset($form['#node'])) {
    if ('statement_node_form' == $form_id) {
//       $form['field_statement_bonedysplasia']['#access'] = FALSE;
    }
  }
}

function statement_node_presave($node) {
//  if (property_exists($node, 'field_statement_bonedysplasia')) {
//    $val = $node->field_statement_bonedysplasia;
//
//    if (empty($val['und'])) {
//      $node->field_statement_bonedysplasia['und'] = array (
//	'0' => array (
//	  'nid' => arg(3),
//	),
//      );
//    }
//  }
}

function statement_node_insert($node) {
//   if ($node->type == 'statement') {
//       $bd_node = node_load(arg(3));
// 
//       if (empty($bd_node->field_bd_statement['und'])) {
// 	$facts = array(
// 	  '0' => array (
// 	    'nid' => $node->nid,
// 	  ),
// 	);
// 	$bd_node->field_bd_statement = array (
// 	  'und' => $facts,
// 	);
// 	node_save($bd_node);
//       } else {
// 	$facts = $bd_node->field_bd_statement['und'];
// 	$new_fact = array (
// 	  'nid' => $node->nid,
// 	);
// 	array_push($facts, $new_fact);
// 	$bd_node->field_bd_statement['und'] = $facts;
// 	node_save($bd_node);
//       }
//   }
}

function statement_node_delete($node) {
//  if ($node->type == 'statement') {
//    $bd_nid = $node->field_statement_bonedysplasia['und'][0]['target_id'];
//    $bd_node = node_load($bd_nid);
//    $facts = $bd_node->field_bd_statement['und'];
//
//    $act_idx = -1;
//    for ($i = 0; $i < count($facts); $i++) {
//      if ($facts[$i]['nid'] == $node->nid) {
//	$act_idx = $i;
//        break;
//      }
//    }
//
//    if ($act_idx != -1) {
//      array_splice($facts, $act_idx, 1);
//      $bd_node->field_bd_statement['und'] = $facts;
//      node_save($bd_node);
//    }
//  }
}

function statement_node_view($node, $view_mode) {
//  if ($node->type == 'statement' && $view_mode == 'teaser') {
//    drupal_add_css(drupal_get_path('module', 'statement') . '/statement.css');
//    $permissions = _bdf_get_node_access_for_user($node->uid, $node->type);
//
//    if ($permissions['edit'] == 1) {
//      $node->content['edit_bdf_link'] = array(
//        '#theme' => 'links',
//        '#links' => array (
//	  'edit-bdf-link' => array (
//	    'title' => t('Edit'),
//	    'href' => 'node/' . $node->nid . '/edit',
//	    'html' => true,
//	  ),
//        ),
//        '#attributes' => array (
//	  'class' => 'bdf-title-link',
//        ),
//      );
//    }
//    if ($permissions['delete'] == 1) {
//      $node->content['delete_bdf_link'] = array(
//        '#theme' => 'links',
//        '#links' => array (
//	  'delete-bdf-link' => array (
//	    'title' => t('Delete'),
//	    'href' => 'node/' . $node->nid . '/delete',
//	    'html' => true,
//	  ),
//        ),
//        '#attributes' => array (
//	  'class' => 'bdf-title-link',
//        ),
//      );
//    }
//  }
  
  return $node;
}

function _bdf_get_node_access_for_user($node_owner, $node_type) {
  global $user;

  $permissions = array();
  $perms = user_role_permissions($user->roles);

  return TRUE;
}

function statement_field_extra_fields() {
  $extra['node']['statement'] = array(
    'display' => array(
      'edit_bdf_link' => array(
        'label' => t('"Edit" link'),
        'weight' => 1,
      ),
      'delete_bdf_link' => array(
        'label' => t('"Delete" link'),
        'weight' => 1,
      ),
    ),
  );

  return $extra;
}

function statement_create($text) {

    global $user;
    $node = new stdClass();
    $node->title = "Statement";
    $node->type = "statement";
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 1; //2 = comments on, 1 = comments off

    $node->body[$node->language][0]['value'] = $text; // the statement
    $node->body[$node->language][0]['format'] = 'filtered_html';

    $node = node_submit($node); // Prepare node for saving
    node_save($node);

    // Setup some stuff that it doesnt want to do on node save for some unknown reason!
    $node->body[LANGUAGE_NONE][0]['safe_value'] = check_markup($node->body[LANGUAGE_NONE][0]['value'], 'filtered_html');
    $node->comment_count = 0;
    $node->name = $user->name;

    // Now lets attach the node to the bone dysplasia


    return $node;
}
