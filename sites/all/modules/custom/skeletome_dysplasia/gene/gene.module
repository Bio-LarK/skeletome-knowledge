<?php
// $Id: gene.module $

function gene_node_view($node, $view_mode) {
  if ($node->type == 'gene' && $view_mode == 'full' && node_is_page($node)) {
    $view = views_embed_view('gene_bone_dysplasias', 'block_1', $node->nid);

    $node->content['bds'] = array(
      '#prefix' => '  <div class="block-title"><h2 class="title">Bone Dysplasias</h2></div>',
      '#suffix' => $view,
    );

  }

  return $node;
}

function gene_menu() {
    $items['node/%node/gene_gm'] = array(
        'title' => 'Gene Mutations',
        'page callback' => 'gene_gene_mutations_callback',
        'page arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'file' => 'gene_genemutations.inc',
        'access callback' => '_check_gene_gm_callback',
        'access arguments' => array(1, 'node'),
        'weight' => 2,
    );

    $items['ajax/gene/%/statement'] = array(
        'type'              => MENU_CALLBACK,
        'page arguments'    => array(2),
        'page callback'     => 'gene_statement_create',
        'access arguments'  => array('access content'),
    );

    $items['ajax/gene/%/statements'] = array(
        'type'              => MENU_CALLBACK,
        'page arguments'    => array(2),
        'page callback'     => 'gene_statements',
        'access callback'   => 'is_curator',
    );


  return $items;
}

function gene_statement_create($gene_id) {
    // Create a new statement
    $data = file_get_contents("php://input");
    $objData = json_decode($data, true);

    $text = $objData['text'];

    $statement = statement_create($text);

    $gene = node_load($gene_id);

    array_unshift($gene->field_gene_statement[LANGUAGE_NONE], array(
        'target_id' => $statement->nid
    ));

    node_save($gene);

    echo json_encode($statement);
}

function gene_statements($gene_id) {

    $return_array = array();
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        // Save the statements
        $data = file_get_contents("php://input");
        $objData = json_decode($data, true);

        $statements = $objData['statements'];
        $statement_ids = array();
        foreach($statements as $statement) {
            $statement_ids[] = $statement['nid'];
        }

        // Load the Bone Dysplasia
        $gene = node_load($gene_id);


        // Remove any comments
        foreach($statements as $statement) {
            // Get the comments for the statement
            $comments = array_values(comment_load_multiple(comment_get_thread(node_load($statement['nid']), '', 1000)));

            if(count($comments) != count($statement['comments'])) {
                // a comment has been deleted
                foreach($comments as $existing_comment) {
                    $found = false;
                    foreach($statement['comments'] as $new_comment) {
                        if($new_comment['cid'] == $existing_comment->cid) {
                            $found = true;
                        }
                    }
                    if(!$found) {
                        comment_delete($new_comment['cid']);
                    }
                }
            }
        }

        // Remove any statements
//        $bone_dysplasia->field_bd_statement[LANGUAGE_NONE] = [];
        $gene->field_gene_statement[LANGUAGE_NONE] = array();
        foreach($statement_ids as $id) {
            $gene->field_gene_statement[LANGUAGE_NONE][] = array(
                'target_id' => $id
            );
        }
        node_save($gene);

        $return_array = $statements;
    } else if($_SERVER['REQUEST_METHOD'] === 'GET') {
        // Get the statements
        $bone_dysplasia = node_load($gene_id);
        $return_array = $bone_dysplasia->field_gene_statement[LANGUAGE_NONE];
    }

    echo json_encode($return_array);
}


function ajax_gene_statement($gene_id) {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $data = file_get_contents("php://input");
        $objData = json_decode($data, true);

        $statement = data_create_statement_for_node($objData['statement'], $gene_id);
        echo drupal_json_encode($statement);
    } else {
        echo "ERROR";
    }
}

function _check_gene_gm_callback($node) {
  if ($node->type === 'gene') {
    if (array_key_exists('und', $node->field_gene_gene_mutation)) {
      if (!empty($node->field_gene_gene_mutation['und'])) {
	return TRUE;
      }
    }
  }

  return FALSE;
}

function gene_node_presave($node) {
  if (property_exists($node, 'type')) {
    if ($node->type == 'gene') {
    }
  }
}

function gene_node_insert($node) {
  if ($node->type == 'gene') {

  }
}

function gene_form_gene_node_form_alter(&$form, &$form_state, $form_id) {
if (isset($form['type']) && isset($form['#node'])) {
  if ('gene_node_form' == $form_id) {
    if (arg(3) != NULL) {
      $form['#node']->title = arg(3);
      $form['title']['#default_value'] = arg(3);
    }

    $form['field_gene_gene_mutation']['#access'] = FALSE;
    $form['field_gene_uri']['#access'] = FALSE;
    }
  }
}

function gene_node_delete($node) {
  // if ($node->type == 'gene') {
//     if (array_key_exists('und', $node->field_gene_gene_mutation)) {
//       if (!empty($node->field_gene_gene_mutation['und'])) {
// 	$gms = $node->field_gene_gene_mutation['und'];
// 	foreach ($gms as $gm) {
// 	  $gm_node = node_load($gm['target_id']);
// 	  $gm_node->field_gene_mutation_gene['und'] = array();
// 	  node_save($gm_node);
// 	}
//       }
//     }
//   }
}