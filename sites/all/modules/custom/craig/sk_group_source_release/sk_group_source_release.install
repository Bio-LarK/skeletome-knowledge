<?php
/**
 * @file
 * Group Source Release Install e.g. June 2010 for ISDS
 */

/**
 * Implements hook_install().
 */
function sk_group_source_release_install()
{
    // Set default variables.
//    variable_set('windfarms_gmap', 1);
//    variable_set('windfarms_default_center_lat', 42.91455);
//    variable_set('windfarms_default_center_long', -75.569851);
//    variable_set('windfarms_default_gmap_zoom', 8);

    // Get localization function for installation as t() may be unavailable.
    $t = get_t();

    // Give user feedback.
//    drupal_set_message($t('Wind Farms variables created.'));

    // Load the taxonomy module
    drupal_load('module', 'taxonomy.module');

    // Define the vocab
    $vocab = (object)array(
        'name' => 'Group Source Releases', // The name of our vocabulary
        'machine_name' => 'sk_group_source_release',
        'description' => t('A vocabulary for releases from group sources e.g. June 2010 for ISDS'), // A description of the vocabulary
        'hierarchy' => 0, // allows hierarchy of terms
        'module' => 'sk_group_source_release',
        'weight' => 0, // the weight of the vocabulary in the list
    );

    // Save the vocabulary
    taxonomy_vocabulary_save($vocab);

    foreach (_sk_group_source_release_installed_fields() as $field) {
        field_create_field($field);
    }

    foreach (_sk_group_source_release_installed_instances() as $instance) {
        $instance['entity_type'] = 'taxonomy_term';
        $instance['bundle'] = 'sk_group_source_release';
        field_create_instance($instance);
    }

    drupal_set_message($t('Group Source Release created.'));
}

/**
 * Implements hook_uninstall().
 */
function sk_group_source_release_uninstall()
{
    $t = get_t();

    // Get the Vocab ID
    $sql = 'SELECT vid FROM {taxonomy_vocabulary} v WHERE v.machine_name = :machine_name';
    $vid = db_query($sql, array(':machine_name' => 'sk_group_source_release'))->fetchField();

    // Get all taxonomy terms with the vid for
    $sql_query  = 'SELECT tid FROM {taxonomy_term_data} t WHERE t.vid = :vid';
    $result = db_query($sql_query, array(':vid' => $vid));

    // Delete all terms
    foreach ($result as $row) {
        taxonomy_term_delete($row->tid);
    }
    drupal_set_message($t('Taxonomy Terms removed.'));

    // Remove all fields and field instances.
    foreach (field_info_instances('taxonomy_term', 'sk_group_source_release') as $field_name => $instance) {
        field_delete_field($field_name);
        field_delete_instance($instance);
    }
    drupal_set_message($t('Group Source Release field and field instances removed.'));

    // Delete the Vocabulary
    taxonomy_vocabulary_delete($vid);

    drupal_set_message($t('Group Source Release removed.'));

    // Clean up deleted fields.
    field_purge_batch(1000);
}


/**
 * Define the fields for our content type.
 *
 * This big array is factored into this function for readability.
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 */
function _sk_group_source_release_installed_fields()
{
    return array(
        'sk_gsr_field_uri' => array(
            'field_name'        => 'sk_gsr_field_uri',
            'cardinality'       => 1,
            'type'              => 'text',
            'settings' => array(
                'max_length'    => 500,
            )
        ),
        'sk_gsr_field_timestamp' => array(
            'field_name'        => 'sk_gsr_field_timestamp',
            'cardinality'       => 1,
            'type'              => 'number_integer',
        ),
        'sk_gsr_field_group_source' => array(
            'field_name'        => 'sk_gsr_field_group_source',
            'cardinality'       => 1,
            'type'              => 'taxonomy_term_reference',
            'settings'      => array(
                'allowed_values' => array(
                    array(
                        'vocabulary'    => 'sk_group_source',
                        'parent'        => '0',
                    )
                )
            )
        )
    );
}

/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 */
function _sk_group_source_release_installed_instances()
{
    // Get localization function for installation as t() may be unavailable.
    $t = get_t();

    return array(

        'sk_gsr_field_uri' => array(
            'field_name'        => 'sk_gsr_field_uri',
            'label'             => $t('URI'),
            'description'       => $t('URI for Group Source Release e.g. ISDS 2010'),
            'widget' => array(
                'type' => 'text_textfield'
            )
        ),
        'sk_gsr_field_timestamp' => array(
            'field_name'        => 'sk_gsr_field_timestamp',
            'label'             => $t("Unix Timestamp"),
            'description'       => $t("The Unix timestamp for the date when the release was made e.g. June 2010"),
            'widget'            => array(
                'type'  =>  'number'
            ),
            'required' => TRUE
        ),
        'sk_gsr_field_group_source' => array(
            'field_name'        => 'sk_gsr_field_group_source',
            'label'             => $t('Source of Release'),
            'description'       => $t('The source of the group e.g. ISDS.'),
            'type'              => 'active_tags_taxonomy_autocomplete'
        )
    );

}