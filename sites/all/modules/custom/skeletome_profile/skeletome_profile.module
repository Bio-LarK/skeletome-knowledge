<?php

/**
 * Implements hook_menu().
 *
 */
function skeletome_profile_menu() {

    $items['profile-page/%user'] = array(
        'page callback' 	=> 'page_profile',
        'page arguments'    => array(1),
        'access arguments'  => array('access content'),
        'type'  => MENU_CALLBACK,
    );

    $items['ajax/profile/orcid/%'] = array(
        'page callback' 	=> 'ajax_get_orcid',
        'page arguments'    => array(3),
        'access arguments'  => array('access content'),
        'type'  => MENU_CALLBACK,
    );

    $items['upload/images'] = array(
        'page callback' 	=> 'skeletome_upload_image',
        'access arguments'  => array('access content'),
        'type'  => MENU_CALLBACK
    );

    return $items;
}


function profile_get($id) {
    $profile = node_load($id);
    echo json_encode($profile);
}

function profile_update($id) {
    $data = file_get_contents("php://input");
    $objData = json_decode($data, true);

    $profile = (object) $objData['node'];
    $profile->body[LANGUAGE_NONE][0]['format'] = 'filtered_html';

    node_save($profile);

    $profile = node_load($profile->nid);
    $profile = _setup_profile_picture($profile);

    echo json_encode($profile);
}

function profile_save() {
    global $user;

    $data = file_get_contents("php://input");
    $objData = json_decode($data, true);

    $profile = (object) $objData['node'];
    $profile->title = $user->name . "'s Profile";
    $profile->type = "profile";
    node_object_prepare($profile); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $profile->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $profile->uid = $user->uid;
    $profile->status = 1; //(1 or 0): published or not
    $profile->promote = 0; //(1 or 0): promoted to front page
    $profile->comment = 1; //2 = comments on, 1 = comments off
    $profile = node_submit($profile); // Prepare node for saving
    $profile->revision = 1;
    $profile->log = "Created new profile.";
    $profile->body[LANGUAGE_NONE][0]['format'] = 'filtered_html';

    node_save($profile);

    $profile = node_load($profile->nid);
    $profile = _setup_profile_picture($profile);

    echo json_encode($profile);
}

function _setup_profile_picture($profile) {
    if(isset($profile->field_profile_image[LANGUAGE_NONE])) {
        foreach($profile->field_profile_image[LANGUAGE_NONE] as &$image_test) {
            $image_test['full_url'] = file_create_url($image_test['uri']);
            $image_test['thumb_url'] = image_style_url('thumbnail', $image_test['uri']);
        }
    }
    return $profile;
}

function page_profile($user) {

    // lets get all the contributed for the user
    $sql = "SELECT DISTINCT n.nid, n.title
            FROM {node_revision} n
            RIGHT JOIN {node} o
            ON o.nid = n.nid
            WHERE n.uid = :uid
            AND (o.type = 'bone_dysplasia' OR o.type = 'gene')
            ORDER BY timestamp DESC
            LIMIT 20";
    $results = db_query($sql, array(
        'uid'   => $user->uid
    ));

    $contributed = array();
    foreach($results as $result) {
        $contributed[] = $result;
    }

    // get the users statement activity
    $sql = "SELECT n.uid, n.nid, b.body_value as `body`, n.created, d.nid as `target_nid`, d.title as `target_title`
            FROM {node} n
            LEFT JOIN {field_data_field_statement_node} s
            ON s.entity_id = n.nid
            LEFT JOIN {node} d
            ON s.field_statement_node_target_id = d.nid
            LEFT JOIN {field_data_body} b
            ON b.entity_id = n.nid
            WHERE n.type = 'statement'
            AND n.uid = :uid
            ORDER BY n.created DESC
            LIMIT 10";
    $results = db_query($sql, array(
        'uid'   => $user->uid
    ));

    $statement_activity = array();
    foreach($results as $result) {
        $statement_activity[] = $result;
    }

    // get the user comment activities
    $sql = "SELECT c.cid, c.nid, c.uid, c.created, b.comment_body_value as `body`
            FROM {comment} c
            LEFT JOIN {field_data_comment_body} b
            ON b.entity_id = c.cid
            WHERE c.uid = :uid
            ORDER BY c.created DESC
            LIMIT 10";
    $results = db_query($sql, array(
        'uid'   => $user->uid
    ));
    $comment_activity = array();
    foreach($results as $result) {
        $comment = $result;

        $sql = "SELECT n.title, n.nid
                FROM {node} n
                RIGHT JOIN {field_data_field_statement_node} s
                ON n.nid = s.field_statement_node_target_id
                WHERE s.entity_id = :statement_id";
        $results = db_query($sql, array(
            'statement_id' => $comment->nid
        ));
        $row = $results->fetchObject();

        if(isset($row->nid)) {
            $comment->target_nid = $row->nid;
            $comment->target_title = $row->title;

            $comment_activity[] = $comment;
        }

    }

    $activity = array_merge($statement_activity, $comment_activity);
    usort($activity, "created_sort");

    // get the profile
    $sql = "SELECT p.entity_id
            FROM {field_data_field_profile_user_id} p
            WHERE p.field_profile_user_id_value = :uid";
    $results = db_query($sql, array(
        'uid'   => $user->uid
    ));
    $row = $results->fetchObject();
    $profile = null;
    if(isset($row->entity_id)) {
        $profile = node_load($row->entity_id);
    }
    $profile = _setup_profile_picture($profile);

    // Get the roles
    $pretty_roles = array();
    foreach($user->roles as $role) {
        if($role == "administrator") {
            $pretty_roles[] = "Administrator";
        } else if ($role == "sk_curator") {
            $pretty_roles[] = "Curator";
        } else if ($role == "authenticated user" && count($user->roles) == 1) {
            // if only one user, show it, otherwise, show the other roles
            $pretty_roles[] = "User";
        }
    }

    // Get the LinkedIn OAuth stuff
    $linked_in = array(
        'authUrl'           => skeletome_linkedin_get_auth_url()
    );

    if(isset($_SESSION['linkedOAuth']) && isset($_SESSION['linkedOAuth']['access_token'])) {
        if($_SESSION['linkedOAuth']['expires'] > time()) {
            $linked_in['isAuthenticated'] = true;
        } else {
            $linked_in['isAuthenticated'] = false;
        }
    } else {
        $linked_in['isAuthenticated'] = false;
    }

    if(isset($_SESSION['linkedOAuth']) && isset($_SESSION['linkedOAuth']['just_granted']) && $_SESSION['linkedOAuth']['just_granted']) {
        $linked_in['justGranted'] = $_SESSION['linkedOAuth']['just_granted'];
        $_SESSION['linkedOAuth']['just_granted'] = false;
    } else {
        $linked_in['justGranted'] = false;
    }

    // Get the users approved statement stuff
    $sql = "SELECT u.entity_id
            FROM {field_data_field_statement_approved_users} u
            WHERE u.field_statement_approved_users_value = :uid";
    $results = db_query($sql, array(
        'uid'   => $user->uid
    ));

    $statement_ids = array_keys($results->fetchAllAssoc("entity_id"));
    $statements = array_values(node_load_multiple($statement_ids));

    drupal_add_js(array(
        'skeletome_profile'     => array(
            'approvedStatements'    => $statements,
            'user'                  => $user,
            'roles'                 => $pretty_roles,
            "contributed"           => $contributed,
            'activity'              => $activity,
            'profile'               => $profile,
            'linkedIn'              => $linked_in
    )), 'setting');

    $output =  array(
        'skeletome_profile_profile_page' => array(
            '#data'     => NULL,
            '#theme'    => 'skeletome_profile_profile_page'
        )
    );
    return $output;
}


function created_sort($a, $b)
{
    if ($a == $b) {
        return 0;
    }
    return ($a->created > $b->created) ? -1 : 1;
}

/**
 * Implements hook_theme().
 */
function skeletome_profile_theme($existing, $type, $theme, $path) {

    $themes['skeletome_profile_profile_page'] = array(
        'variables' => array(
            'data'  => NULL
        ),
        'type'      =>'theme',
        'path'      => drupal_get_path('module', 'skeletome_profile') . '/templates',
        'template'  => 'profile_page'
    );

    return $themes;
}